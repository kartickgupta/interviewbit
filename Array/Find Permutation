/*
Given a positive integer n and a string s consisting only of letters D or I, you have to find any permutation of first n positive integer that satisfy the given input string.
D means the next number is smaller, while I means the next number is greater.

Notes:
1. Length of given string s will always equal to n - 1
2. Your solution should run in linear time and space.

Example :
    
    Input 1:
    
    n = 3
    s = ID
    Return: [1, 3, 2]
*/

vector<int> Solution::findPerm(const string s, int B) {
    vector<int> B(s.length());
    int i, start = 1, upto = s.length(); 
    for(i =0; i <s.length() && start < upto; i++){
        if(s[i] == 'I')     B[i] = start++;
        else if (s[i] == 'D')   B[i] = upto--;
    }
    B[s.length()-1] = start;
    return B;
}
