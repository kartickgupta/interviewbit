/*
Given a non-negative number represented as an array of digits,
add 1 to the number ( increment the number represented by the digits ).
The digits are stored such that the most significant digit is at the head of the list.

Example:
If the vector has [1, 2, 3]
the returned vector should be [1, 2, 4] as 123 + 1 = 124.

Que Link :: https://www.interviewbit.com/problems/add-one-to-number/


Aproch::
    1. Add 1 from last,   if A[i] + 1 != 10 Thereofore, no carry break
    2. if A[0] + 1 >= 10; Add 1 at begining of the Number (increment in no of digits).
    3. Remove Zero's from Beginning (if any).

*/


vector<int> Solution::plusOne(vector<int> &A) {
int i = A.size();

    // Add 1 from last
    // if A[i] + 1 != 10 break
    while(i--){
        A[i] = (A[i] +1) %10; 
        if(A[i] != 0){
            break;
        }
    }
    
    // if A[0] + 1 >= 10; Add
    // 1 at begining of the Number
    if(i < 0 && A[0] == 0){
        A.insert(A.begin(), 1);
    }
    int count = 0;

    // ! Removing Zero's from Beginning
    for(i = 0; i < A.size(); i++){
        if(A[i] == 0){
            count++;
        }
        else    break;
    }
    if(count > 0){
        A.erase(A.begin(), A.begin() + count);
    }
    return A;
}
